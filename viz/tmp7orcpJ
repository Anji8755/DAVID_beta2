import mimetypes

from django.http.response import HttpResponse
from django.views.decorators.csrf import csrf_exempt
#from django.contrib.auth.decorators import login_required
from .server import server
from django.http import JsonResponse
import pandas as pd
from django.db import connection
import json
import plotly.graph_objs as go
from datetime import datetime
import mail

import math, random


def fetch_data(q,returnNull):       #returnNull = True in insert and dele
    with connection.cursor() as cursor:
        cursor.execute(q)
        result={};
        if not returnNull:
            result = pd.read_sql(
            sql=q,
            con=connection
            )
        cursor = connection.cursor();

    return result

def test(request, value):
    return HttpResponse('sdfghjkl')


################################    REGISTER   ##########################3
@csrf_exempt
def reg(request,methods=['POST']):
    print('insisde reg post')

    print(request.body)
    body_unicode = request.body.decode('utf-8')
    body = json.loads(body_unicode)
    print(body['id'])
    error={'failure':False , 'msg': 'reg executed successfully'}
    return JsonResponse(error)

@csrf_exempt
def sendquery(request,methods=['POST']):
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    query= (f''' SELECT  Email FROM viz_testuser where UserDomain='Admin' ''')  #or Email='{email}'
    print(query)
    sendTo=[]
    admins = pd.DataFrame(fetch_data(query,False))
    for idx,val in enumerate(admins):
                print('################inside enumerate(admins)')
                sendTo.append(admins.get_value(idx,"Email"))
    msg = "<p>Email of user : "+ bodyCont['email']+"</p><br>"+bodyCont['msg']
    mail.mailer([sendTo],[msg],bodyCont['sub'])
    return JsonResponse({"failure":False})



@csrf_exempt
def register(request,methods=['POST']):
    print('$$$$$$$$$$$$$$$$$$inside register first')
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    username=bodyCont['id']
    email=bodyCont['email']
    pwd=bodyCont['pwd']

    print(username, email,pwd)
    emails=[]
    body=[]

    query= (f''' SELECT * FROM viz_testuser where UserName ='{username}'  ''')   #or Email='{email}'
    print(query)
    regUser = pd.DataFrame(fetch_data(query,False))
    print(regUser)

    if not regUser.empty:
        error={'failure':True,'msg': 'reguser already present in viz_testuser'}
        #return JsonResponse(error)
    else:
        print('$$$$$$$$$$$$$$$$$$inside register')
        query= (f''' SELECT * FROM RegTable where UserName ='{username}'  ''') #or Email='{email}'
        print(query)
        regUser = pd.DataFrame(fetch_data(query,False))
        print(regUser)
        if not regUser.empty:
            error={'failure': True,'msg':'user already present in regtable'}
            #return JsonResponse(error)
        else:
            query= (f''' INSERT INTO RegTable (UserName,Password,Email) values('{username}','{pwd}','{email}')''')
            print(query)
            fetch_data(query,True)
            msg_reguser="<b>Hello "+username+" ,</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> This request has been sent to the admin for approval. We will get back to you soon.</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>"
            sub_reguser="Successfully sent Registration request"

            mail.mailer([email],[msg_reguser],sub_reguser)

                ########### to fetch all admins
            adminQuery= (f''' SELECT UserName, Email FROM viz_testuser where UserDomain='Admin' ''')
            admins = pd.DataFrame(fetch_data(adminQuery,False))
            #emails.append(email)
            body.append("<b>Hello "+username+" ,</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> This request has been sent to the admin for approval. We will get back to you soon.</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>")
            for idx,val in enumerate(admins):
                print('################inside enumerate(admins)')
                emails.append(admins.get_value(idx,"Email"))
                msgbody="<b>Hello"+ admins.get_value(idx,"UserName") +",</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> New request has been raised by "+username+" with "+email+" for approval.</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>"
                print(msgbody)
                print(idx)
                body.append(msgbody)
            sub_admin='Registration Request'
            mail.mailer(emails,body,sub_admin)
            error={'failure':False , 'msg': 'user succesfully registered'}
    return JsonResponse(error)


@csrf_exempt
#def delData(request,user_id,username,action,remarks,methods=['GET']):
def delData(request,methods=['POST']):
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    user_id=bodyCont['user_id']
    username=bodyCont['username']
    action=bodyCont['action']
    remarks=bodyCont['remarks']

    print('##################inside dalData')
    initquery=(f''' SELECT UserDomain from viz_testuser WHERE Userid ='{user_id}' ''')
    df= pd.DataFrame(fetch_data(initquery, False))
    #df.to_dict()
    print(df.get_value(0,"UserDomain"))
    if (df.get_value(0,"UserDomain"))=='Admin':
        query=(f''' DELETE FROM RegTable WHERE UserName ='{username}'  ''')
        print(query)
        fetch_data(query,True)
        #now = datetime.datetime.now()
        now = datetime.now()
        timestamp=now.strftime('%Y-%m-%d   %H:%M:%S') + ('-%02d' % (now.microsecond / 10000))
        content="Timestamp : "+timestamp+'...........'+"Admin Name : " +user_id+'........'+"User Name : "+username+'...........'+"Action Taken : "+action+"............................"+"With Remarks : "+remarks
        print(content)
        print(type(content))
        f = open("/adminLogs/adminLogDetails.txt", "a+")
        cont=f.read()
        print('################## read content of admin log is')
        print(cont)
        f.write(content)
        f.write('\n')
        print('##################write content of admin log is')
        print(cont)
        f.close()

        print('#################################    extracting email for user inside deldata')

        initquery=(f''' SELECT * FROM RegTable where UserName ='{username}' ''')
        initdf=pd.DataFrame(fetch_data(initquery,False))
        msg_reguser="<b>Hello "+username+" ,</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> Your request has been declined.</p><br><p>Remarks : "+remarks+"</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>"
        sub_reguser="Request Declined"

        mail.mailer([initdf.get_value(0,"Email")],[msg_reguser],sub_reguser)
        error={'failure':False,'msg':'Successfully deleted User'}


    else:
        error={'failure':True,'msg':'You are not Admin'}
    return JsonResponse(error)
@csrf_exempt
#def addData(request,user_id,username,domain,remarks,methods=['GET']):
def addData(request,methods=['GET']):
    print('#################################    INSIDE addData')
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)

    username=bodyCont['username']
    domain=bodyCont['domain']
    remarks=bodyCont['remarks']

    initquery=(f''' SELECT * FROM RegTable where UserName ='{username}' ''')
    initdf=pd.DataFrame(fetch_data(initquery,False))

    domVal={'TIL':1,'GSFC':2}
    userid=str(domVal[domain])+(str(datetime.timestamp(datetime.now()))).split('.')[0]
    query=(f''' INSERT INTO viz_testuser(Userid,UserDomain,UserName,Password,Email) VALUES({userid},'{domain}','{username}','{initdf.get_value(0,"Password")}','{initdf.get_value(0,"Email")}')''')
    print(query)
    fetch_data(query,True)
    delquery=(f''' DELETE FROM RegTable where UserName='{username}' ''')
    print(delquery)
    fetch_data(delquery,True)
    msg_reguser="<b>Hello "+username+" ,</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> Your request has been approved.</p><br><p>Remarks : "+remarks+"</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>"
    sub_reguser="Request Approved"

    mail.mailer([initdf.get_value(0,"Email")],[msg_reguser],sub_reguser)
    error={'failure':True,'msg':'New User added to viz_testuser'}
    return JsonResponse(error)
@csrf_exempt
def fetch_regtab(request, methods=['POST']):

    print('############inside fetch_regtab')
    print(request)
    data = request.POST
    print(type(data))
    print('#######################data is')
    print(data)
    print('Date now: %s' % datetime.now())
    query=(f''' SELECT * FROM RegTable ''')
    df=pd.DataFrame(fetch_data(query, False))
    return JsonResponse(df.to_dict())

@csrf_exempt
def draw_season_points_graph(request,methods=['POST']):
    print("result for updation is : ")
    #print(results['opponent'])
    print(request.POST)
    data = json.loads(request.body)
    print('#######################request.body')

    print()
    print (data["xdata"])
    print (data["ydata"])
    print (data["graph"])

    #print((request.POST['results']))
    #print(json.dumps(results))
    xdata =(data["xdata"])
    ydata =(data["ydata"])
    graph =(data["graph"])
    if  graph=="bar-chart":
        #print(dates)
        print(graph)
        figure = go.Figure(
        data=[
            go.Bar(x=xdata, y=ydata)
        ],
        layout=go.Layout(
            title='Points Accumulation',
            showlegend=True
            )
        )
    else:
         figure = go.Figure(
        data=[
            go.Scatter(x=xdata, y=ydata, mode='lines+markers')
        ],
        layout=go.Layout(
            title='Points Accumulation',
            showlegend=False
        )
    )



    return JsonResponse(figure,safe=False)

@csrf_exempt
def login_get_data(request):
    print("in login_get_data api")
    print('#################################    INSIDE addData')
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    user_id=bodyCont['username']
    pwd = bodyCont['pwd']
    isLegalUser=False;
    respData=''
    if request.method=='POST':
        initquery = ( f''' SELECT DISTINCT Userid FROM viz_testuser''' )
        legalUsers = pd.DataFrame(fetch_data(initquery,False))
        print(legalUsers)
        for x in range(legalUsers.shape[0]):
            print('444444444444444444444    inside for ')
            print(type(user_id))
            print(type(legalUsers.get_value(x,"Userid")))
            if user_id==(str(legalUsers.get_value(x,"Userid"))):
                isLegalUser=True
                print("legal user")

        if isLegalUser :
            query = ( f''' SELECT DISTINCT * FROM viz_testuser WHERE Userid='{user_id}' ''' )
            #query = ( f''' SELECT DISTINCT GrpTab FROM UserGroup WHERE UserDomain=(SELECT DISTINCT UserDomain FROM viz_testuser WHERE Userid='{user_id}') ''' )
            userlist = pd.DataFrame(fetch_data(query,False))
            print('########################userlist is')
            print(userlist)


            if  not(userlist.empty) :
                respData = {"pwd":""}
                #respData['pwd'] = (userlist.get_value(0,"Password"))
                userDomain =(userlist.get_value(0,"UserDomain"))
                respData['domainTabs'] = userDomain
                respData["pwd"]=False

                ##################  START OF ADMIN ACCESS ANJALI (07.08.19)
                print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
                print(userlist.get_value(0,"UserDomain"))
                if ((userlist.get_value(0,"UserDomain"))=='Admin') and (pwd ==(userlist.get_value(0,"Password"))) :

                    respData['adminAccess']=True
                    print('###################### respData.admin')
                    print(respData['adminAccess'])
                    respData["pwd"]=True
                ##################  END OF ADMIN ACCESS ANJALI (07.08.19)

                #print(respData['domainTabs'])
                #tableData = getTableData(respData['domainTabs'])
                #if  not(usrGrp.empty) :
                 #   for item in usrGrp:
                  #      query=( f''' SELECT DISTINCT * FROM '{item}' ''')
                   #     #print(query)
                    #    tabData  = pd.DataFrame(fetch_data(query))
                     #   print(tabData)
                      #  respData['tabData'].append(tabData)
                elif  (pwd ==(userlist.get_value(0,"Password"))):
                    respData['pwd']=True

            else:
                return HttpResponse('get worked')
        #print(respData)
            return JsonResponse(respData)
        else:
            return JsonResponse({"msg":"user  does not exist"})

@csrf_exempt
def getDomainData(request):
    print("in domainData api")
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    domain=bodyCont['domain']

    if request.method=='POST':
        print("starting delay")
        #time.sleep(5)
        print("ending delay")
        respData = {"domainTabs":""}
        #query = ( f''' SELECT DISTINCT * FROM viz_testuser WHERE Userid='{user_id}' ''' )
        query = ( f''' SELECT DISTINCT GrpTab FROM UserGroup WHERE UserDomain='{domain}' ''' )
        #query = (f'''  ''')
        #query = (f'''SELECT *  FROM soccer-stats.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE''')
        userlist = pd.DataFrame(fetch_data(query, False))
        print('########################userlist is')
        print(userlist)

        if  not(userlist.empty) :
            #respData['pwd'] = "superpwd1" #(userlist.get_value(0,"Password"))
            domainTabs =(userlist.get_value(0,"GrpTab"))
            respData['domainTabs'] = domainTabs
            print(respData['domainTabs'])

    else:
        return HttpResponse('get worked')
    print(respData)
    return JsonResponse(respData)


@csrf_exempt
def getTabData(request):
    print("in tabData api")
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    tables=bodyCont['domainTabs']

    if request.method=='POST':
        respData = {}

        respData['dtyp'] =None
        if (tables) :
            tables = tables.split("-")
            for item in tables:

              query=( f''' SELECT DISTINCT * FROM '{item}' ''')
              query2 = (f'''PRAGMA table_info('{item}') ''')
              types =pd.DataFrame(fetch_data(query2, False))

              tabData  = (pd.DataFrame(fetch_data(query,False))).to_json()
              respData[item]=(tabData)

              respData[item+"type"]=types.to_json()
              print('###################datatypes are theseeeee')
              print(respData[item+"type"])
              print('##########response to  be sent')
              print(respData)


              #break

    else:
        return HttpResponse('get worked')
    return JsonResponse((respData))

################   MERGE

@csrf_exempt
def getMergeData(request):
    print('#########################inside getmergedata')
    body_unicode = request.body.decode('utf-8')
    bodyCont = json.loads(body_unicode)
    tab=bodyCont['tables']
    col=bodyCont['cols']
    exclude=bodyCont['exclude']
    tables = tab.split("-")
    col = col.split("-")
    join = exclude.split("-")
    query=(f'''select distinct * from ''')
    end=(f'''''')
    if request.method=='POST':
        dictResp={}
        tmp={}
        print('#############inside GET Method')
        if (len(tables)>1):
            for idx,val in enumerate(tables):
                print(val)
                query2 = (f'''PRAGMA table_info('{val}') ''')
                types =pd.DataFrame(fetch_data(query2,False))

                print('$$$$$$$$$$$$$$$$$$$$$$$types for tables are')

                tmp[val]=types.to_json()
                print('$$$$$$$$$$$$$$$$$$$$$$   tmp resp is')
                print(tmp)
                print(idx)
                print(len(tables))
                if(idx<(len(tables)-1)):
                    print('###########inside if')
                    query =query+(f'''({val} {join[0]} join''')
                    end =(f'''on {val}.{col[idx]}={tables[idx+1]}.{col[idx+1]})''')+end
                    print(query+end)
                    if val==tables[-2]:
                        query=query+(f''' {tables[-1]} ''')
            print(query+end)
            result = pd.DataFrame(fetch_data(query+end,False))
            print('$$$$$$$$$$$$$$$$$$$$$$$$$    result')
            print(result)
            ls=[]
           # dictResp={}
            for item in result:
                print('&&&&&&&&&&#################################')
                #print(item)
               # print(type(item))
                comp=item.split(':')

                if col.count(comp[0]) <= 0 :
                    #push data in array
                    print(comp[0])
                    dictResp[comp[0]]=((result[item]).to_dict())
                    ls.append(comp[0])
                    ls.append(result[item])
                    print('%%%%%%%%%%%%%%%  APPEND IN LS')
                    #print(ls)
            #push master table coldata
            print((result).to_dict())
            print(result['Id'])
            print((result['Id']).to_dict())
            print(col[tables.index(join[1])])
            if (col[tables.index(join[1])]) == "Id" :
                print("condition match")
                dictResp[((col[tables.index(join[1])]))]=(((result[col[tables.index(join[1])]])["Id"]).to_dict())
                print((((result[col[tables.index(join[1])]])).to_dict()))
                print((((result[col[tables.index(join[1])]]).Id).to_dict()))

            else:
                dictResp[((col[tables.index(join[1])]))]=(((result[col[tables.index(join[1])]])).to_dict())
            #ls.append(result[col[tables.index(join[1])]])
            #results= [item.to_dict() for item in ls]
            #print(results)
            #jsdata = json.dumps({"results": results})
            #return HttpResponse(jsdata)
            #return HttpResponse(ls)
            print(dictResp)
            return JsonResponse(dictResp)
        else :
            query = (f''' select * from {tables[0]} ''')
            query2 = (f'''PRAGMA table_info('{item}') ''')
            types =pd.DataFrame(fetch_data(query2,False))
            ###################### start anjali 16/07/19
            tabData=[]
            ######################end anjali 16/07/19
            tabData[tables[0]]  = (pd.DataFrame(fetch_data(query,False))).to_json()
            tabData[tables[0]+"type"]=types.to_json

            return JsonResponse(tabData)



    return HttpResponse('master not available')


def forgotPwd(request,methods=['GET']):
    print('##################inside forgot_pwd')

    email='anjirwt8755@gmail.com'
    query=(f''' SELECT EMAIL FROM viz_testuser WHERE Email= '{email}' ''')
    print(query)

    df=pd.DataFrame(fetch_data(query,False))
    print(df)
    print(df.empty)
    if not df.empty:
        OtpQuery=(f''' SELECT OTP,GenTime FROM OtpTab WHERE Email= '{email}' ''')
        print('OTPQuery is:',OtpQuery)
        df1=pd.DataFrame(fetch_data(OtpQuery,False))
        if not df1.empty and (df1.get_value(0,"GenTime")<900.00):
            digits = "0123456789"
            OTP = ""
            for i in range(4) :
                OTP += digits[math.floor(random.random() * 10)]
            print('OTP is:',OTP)
            currentTS = datetime.datetime.timestamp()
            print('currentTS:',currentTS)
            timestamp={'currentTS':currentTS}
            initquery=(f''' INSERT INTO OtpTab(OTP,GenTime) VALUES('{OTP}','{timestamp  }')  ''')
            print(initquery)
            df2=pd.DataFrame(fetch_data(initquery,True))
            msg_reguser="<b>Hello,</b> <br><p> <span style = 'color :blue ;' >Welcome to DAVID</span> Your OTP is "+OTP+". This is valid for 15 mins.</p><br><p>Have a great day ahead !</p><br><p>Thanks and Regards</p><br><p>DAVID</p>"
            sub_reguser="OTP for DAVID"
            mail.mailer([email],[msg_reguser],sub_reguser)
        else:
            print(df1.get_value(0,"OTP"))


    else:
        error={'failure':True , 'msg': 'OOPS!!! Wrong Email'}
    return JsonResponse(error)

#def forgotPwdOtp(request,get_otp,methods=['POST'])
#    if OTP==get_otp:



def dispatcher(request):
    '''
    Main function
    @param request: Request object
    '''
    params = {
        'data': request.body,
        'method': request.method,
        'content_type': request.content_type
    }
    with server.test_request_context(request.path, **params):
        server.preprocess_request()

        try:
            print('#####################################inside viz.views.try block')
            print(server.full_dispatch_request())                           #<Response 1069 bytes [200 OK]>
            response = server.full_dispatch_request()
        except Exception as e:
            response = server.make_response(server.handle_exception(e))

        response.direct_passthrough = False
        print('#######################################data from response')
        print(response.get_data)                        #<bound method BaseResponse.get_data of <Response 1069 bytes [200 OK]>>
        return response.get_data()


@csrf_exempt
def dash_json(request, **kwargs):
    """Handle Dash JSON API requests"""
    print('###################after processing /viz/_dash- the requested  url is: ')
    print(request.get_full_path())
    return HttpResponse(dispatcher(request), content_type='application/json')


def dash_index(request, **kwargs):
    """Handle Dash CSS requests"""
    print('##################after processing /viz/')
    return HttpResponse(dispatcher(request), content_type='text/html')


def dash_guess_mimetype(request, **kwargs):
    """Handle Dash requests and guess the mimetype. Needed for static files."""
    url = request.get_full_path().split('?')[0]
    print('#######################aftre processing /viz/assests/ link, url is:')
    print(url)
    content_type, _encoding = mimetypes.guess_type(url)
    return HttpResponse(dispatcher(request), content_type=content_type)